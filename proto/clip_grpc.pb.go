// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/clip.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClipClient is the client API for Clip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	PushGetStream(ctx context.Context, in *ConnRequest, opts ...grpc.CallOption) (Clip_PushGetStreamClient, error)
}

type clipClient struct {
	cc grpc.ClientConnInterface
}

func NewClipClient(cc grpc.ClientConnInterface) ClipClient {
	return &clipClient{cc}
}

func (c *clipClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocol.Clip/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/protocol.Clip/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipClient) PushGetStream(ctx context.Context, in *ConnRequest, opts ...grpc.CallOption) (Clip_PushGetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Clip_ServiceDesc.Streams[0], "/protocol.Clip/PushGetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clipPushGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Clip_PushGetStreamClient interface {
	Recv() (*MsgResponse, error)
	grpc.ClientStream
}

type clipPushGetStreamClient struct {
	grpc.ClientStream
}

func (x *clipPushGetStreamClient) Recv() (*MsgResponse, error) {
	m := new(MsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClipServer is the server API for Clip service.
// All implementations must embed UnimplementedClipServer
// for forward compatibility
type ClipServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
	PushGetStream(*ConnRequest, Clip_PushGetStreamServer) error
	mustEmbedUnimplementedClipServer()
}

// UnimplementedClipServer must be embedded to have forward compatible implementations.
type UnimplementedClipServer struct {
}

func (UnimplementedClipServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClipServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedClipServer) PushGetStream(*ConnRequest, Clip_PushGetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushGetStream not implemented")
}
func (UnimplementedClipServer) mustEmbedUnimplementedClipServer() {}

// UnsafeClipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipServer will
// result in compilation errors.
type UnsafeClipServer interface {
	mustEmbedUnimplementedClipServer()
}

func RegisterClipServer(s grpc.ServiceRegistrar, srv ClipServer) {
	s.RegisterService(&Clip_ServiceDesc, srv)
}

func _Clip_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Clip/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clip_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Clip/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clip_PushGetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClipServer).PushGetStream(m, &clipPushGetStreamServer{stream})
}

type Clip_PushGetStreamServer interface {
	Send(*MsgResponse) error
	grpc.ServerStream
}

type clipPushGetStreamServer struct {
	grpc.ServerStream
}

func (x *clipPushGetStreamServer) Send(m *MsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Clip_ServiceDesc is the grpc.ServiceDesc for Clip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Clip",
	HandlerType: (*ClipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Clip_Ping_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Clip_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushGetStream",
			Handler:       _Clip_PushGetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/clip.proto",
}
